name: Android CI/CD - Build APK

run-name: Build Android Gallery APK by @${{ github.actor }}

on:
  push:
    branches: 
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches: 
      - main
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type to generate'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release
        - both

env:
  MAIN_MODULE: app
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 30
        
    steps:
    # Checkout repository code
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Setup Java 17 with Gradle caching
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
        cache-dependency-path: |
          *.gradle*
          gradle/wrapper/gradle-wrapper.properties
    
    # Setup Gradle with latest action
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-home-cache-cleanup: true
        cache-read-only: ${{ github.ref != 'refs/heads/main' }}
    
    # Validate Gradle wrapper
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v3
    
    # Make gradlew executable
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    # Run lint checks
    - name: Run lint checks
      run: ./gradlew lintDebug
      continue-on-error: true
    
    # Run unit tests
    - name: Run unit tests
      run: ./gradlew testDebugUnitTest
    
    # Generate test report (optional, skip if fails)
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      continue-on-error: true
      with:
        name: Unit Tests
        path: '**/build/test-results/testDebugUnitTest/TEST-*.xml'
        reporter: java-junit
        fail-on-error: false
    
    # Build debug APK
    - name: Build debug APK
      if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      run: ./gradlew assembleDebug --stacktrace
    
    # Build release APK (unsigned)
    - name: Build release APK
      if: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || startsWith(github.ref, 'refs/tags/') }}
      run: ./gradlew assembleRelease --stacktrace
    
    # Upload debug APK artifact
    - name: Upload debug APK
      if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: android-gallery-debug-apk-${{ github.sha }}
        path: ${{ env.MAIN_MODULE }}/build/outputs/apk/debug/*.apk
        retention-days: 30
        if-no-files-found: error
    
    # Upload release APK artifact
    - name: Upload release APK
      if: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-artifact@v4
      with:
        name: android-gallery-release-apk-${{ github.sha }}
        path: ${{ env.MAIN_MODULE }}/build/outputs/apk/release/*.apk
        retention-days: 30
        if-no-files-found: error
    
    # Upload lint results
    - name: Upload lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-results-${{ github.sha }}
        path: '**/build/reports/lint-results-*.html'
        retention-days: 7
        if-no-files-found: ignore

  # Create GitHub release with APK for tags
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    
    steps:
    - name: Download release APK
      uses: actions/download-artifact@v4
      with:
        pattern: android-gallery-release-apk-*
        merge-multiple: true
        path: ./apks
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: ./apks/*.apk
        generate_release_notes: true
        make_latest: true
        discussion_category_name: Releases
        body: |
          üöÄ **Android Gallery App Release**
          
          **What's Changed:**
          - iOS-style Photos interface
          - Modern Material Design 3
          - Improved video playback with ExoPlayer
          - Enhanced image loading with Glide
          
          **Installation:**
          1. Download the APK below
          2. Enable "Install from unknown sources" in Android settings
          3. Install the APK on your device
          
          **System Requirements:**
          - Android 7.0 (API 24) or higher
          - Storage permissions for media access
        
  # Notify on build completion
  notify:
    name: Notify Build Status
    if: always()
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Build Success
      if: ${{ needs.build.result == 'success' }}
      run: |
        echo "‚úÖ Android build completed successfully!"
        echo "üì± APK artifacts are ready for download"
        
    - name: Build Failed
      if: ${{ needs.build.result == 'failure' }}
      run: |
        echo "‚ùå Android build failed!"
        echo "Check the logs above for detailed error information"
        exit 1